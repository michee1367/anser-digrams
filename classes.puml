@startuml classes

    namespace Anser.EntityAdministration #DDDDDD {

        class Province {
            string name : "nom"
            int population : "population"
            float area : "surface"
            float income : "Revenu total"
            geometry geom : "Données Geometrique"
        }

        class Territory {
            string name : "nom"
            int population : "population"
            float area : "surface"
            float income : "Revenu total"
            geometry geom : "Données Geometrique"
        }

        class City {
            string name : "nom"
            int population : "population"
            float area : "surface"
            float income : "Revenu total"
            geometry geom : "Données Geometrique"
        }
        
        class Sector {
            string name : "nom"
            int population : "population"
            float area : "surface"
            float income : "Revenu total"
            geometry geom : "Données Geometrique"
        }

        class Locality {
            string name : "nom"
            int population : "population"
            float area : "surface"
            float income : "Revenu total"
            geometry geom : "Données Geometrique"
        }
        circle circle1

    }

    namespace Anser.ExistingPlants #C2D2DE {

        class ExistingPlant {
            string name : "nom"
            geaometry geom : "Données Geometrique"
            float power : "Puissance installée/ disponible [KW]"
            int nbrOfhouseholds : "Nombre de ménages connectés"
            float powerForProductiveUsed : "Puissance ménages [KW]"
            float powerForProductiveUsed : "Puissance usage productif/ industriel"
        }

        class ExistingPlantType {
            string name : "nom"
        }

        class OwnerAndOrOSER {
            string name : "nom"
            bool isOwner() : "message verification si l'instant est Propriétaire"
            bool isOSER() : "message verification si l'instant est OSER"

        }
        circle circle2
    }

    namespace Anser.ExistingPowerLines #A2A2DE {

        class PowerLine {

            float tension : "Tension de la ligne"
            float tension : "Tension de la ligne"
            geometry geom : "Données Geometrique"
        }

        class PowerLineType {
            string wording : "denomination du type de la ligne"
        }

        class Nature {
            string wording : "denomination de la Nature de la ligne"
        }
        circle circle3
    }

    namespace Anser.IndividualSets #92A2AE {

        class IndividualSet {
            string wording : "Denomination du Kit individuel"
            string nbrhouseholdsConnected : "Nombre des ménages connectés"
            float powerAvailable : "Puissance disponible [KW]"
            geometry geom : "Données géographique"
        }
        circle circle4
    }

    namespace Anser.HydroelectricPotential #A2929E {

        class HydroelectricPotential {
            string siteName : "Nom du site"
            geometry geom : "Données géographique"
            string riverName : "Nom de la rivière"
            float dropHeight : "Hauteur de chute [m]"
            float usableFlow : "Débit utilisable [m3/s]"
            float usablePower : "Puissance exploitable [KW]"
        }
        circle circle5

    }

    namespace Anser.SolarAndWindPotential {

        class SolarPotential {
            string siteName : "Nom du site"
            float solarRadiation : "Rayonnement solaire [KWh/m 2 /jour]"
            geometry geom : "Données géographique"            
        }

        class WindPotential {
            string siteName : "Nom du site"
            float windSpeed : "Rayonnement vent [m/s]"
            geometry geom : "Données géographique"
        }

        circle circle6


    }

    namespace Anser.DrinkingWaterSupply #32A1B2 {
        
        class DistributionNetwork {
            string wording : "Denomination"
            geometry geom : "Données géographique"
        }

        class Fountain {
            string wording : "Denomination"
            geometry geom : "Données géographique"
        }

        circle circle7
    }

    namespace Anser.Health #3271F2 {
        circle circle8

        class HealthZone {
            string name : "Nom Zone de santé"
            int population : "population de la Zone de santé"
            geometry geom : "Données géographique"

        }

        class HealthInstitution {
            string name : "Nom Etablissement de santé"
            geometry geom : "Données géographique"
            float accommodationCapacity : "Capacité d’accueil de l’établissement [nombre de personnes]"
            float estimatedConsumption : "Consommation estimée lorsqu’existante"

        }

        class HealthInstitutionCategory {
            string name : "Nom Catégory  Etablissement de santé"

        }

        class HealthInstitutionService {
            string name : "Nom Service  Etablissement de santé"

        }

    }


    namespace Anser.Education #F271F2 {
        circle circle9

        class EducationInstitution {
            string name : "Nom Etablissement "
            geometry geom : "Données géographique"
            float accommodationCapacity : "Capacité d’accueil de l’établissement [nombre de personnes]"
            float estimatedConsumption : "Consommation estimée lorsqu’existante"

        }

        class EducationInstitutionCategory {
            string name : "Nom Catégory  Etablissement"
        }

    }
    namespace Anser.PlacesOfWorship #F27132 {
        circle circle10

        class PlaceOfWorship {
            string name : "Nom du lieu"
            geometry geom : "Données géographique"
            float accommodationCapacity : "Capacité d’accueil de l’établissement [nombre de personnes]"
            float estimatedConsumption : "Consommation estimée lorsqu’existante"

        }

    }

    namespace Anser.Telecommunication #F2F132 {
        circle circle11

        class TelecommunicationOperator {
            string name : "Nom de l'opérateur "

        }

        class TelecommunicationNetworkAccessPoint {
            geometry geom : "Données géographique"
            string telephoneNetworkQuality : "Données géographique"
            string internetNetworkQuality : "Données géographique"
            boolean hasAccessToInternetServices() :  "Message pour demander s'il y a Données géographique accès aux services Internet"
            float estimatedConsumption : "Consommation estimée lorsqu’existante"

        }

        class MobileSubscriberBase {
            geometry geom : "Données géographique"
        }
    }

    namespace Anser.WaysOfCommunication #22F1A2 {
        circle circle12
        

        class WayOfCommunication {
            float length : "Longueur Voies de communication"
            float tonnage : "Tonnage"
            geometry geom : "Données géographique"
        }

        class WayOfCommunicationType {
            string name : "Nom du type de voie"
        }
        class ModeOfTransport {
            string name : "Nom Mode de transport ou véhicules d’usage" 
        }
        class AccessibleSection {
            string wording : "Dénomination Tronçon accessible ou fonctionnel"
            geometry geom : "Données géographique"

        }
        class RoadSurface {
            wording : "Dénomination Revêtement de la route"
        }
    }

    namespace Anser.LocalEconomy #527152 {
        circle circle13

        

        class EconomicActivity {
            float currentProduction : "Production actuelle [quantité en kg,tonne…]"
            float potentialProduction : "Production potentielle [quantité en kg,tonne…]"
            geometry geom : "Données géographique"
            float estimatedConsumption : "Consommation estimée lorsqu’existante"
        }

        class EconomicActivityType {
            string wording : "Dénomination du Type Activité économique"
        }

        class Equipment {
            string wording : "Dénomination Équipements disponibles"
        }
        class ConsumptionCenter {
            geometry geom : "Données géographique"
            string wording : "Dénomination Centres de consommation pour l’évacuation des produits"
        }
    }

    namespace Anser.Projects #62FFF2 {
        circle circle14

        class Project {
            string wording : "Denomination du Projet"
            float plannedPowerForHouseholds : "Puissance planifiée pour ménages [KW]"
            float plannedPowerForProductive : "Puissance planifiée pour usage productif/ industriel [KW]"
            geometry geom : "Données géographique"
            int nbrHouseholds : "nombre de ménages connectés"
            
        }
        class ProjectType {
            string wording : "Denomination du type de Projet"
        }
        class ProjectState {
            string wording : "Denomination État du projet"
        }
        class Line {
            string wording : "Denomination de la lignes associées"
            geometry geom : "Données géographique"
        }
        class Substations {
            string wording : "Denomination de la sous-stations associées"
            geometry geom : "Données géographique"
        }
        class Transformers {
            string wording : "Denomination du transformateurs"
            geometry geom : "Données géographique"
        }
        class ProgressStatus {
            string wording : "Denomination Statut d’avancement"
        }
    }

    namespace Anser.MultiSectorData #A2A502 {

        class SME {
            float wording : "Dénomination PME "
            geometry geom : "Données géographique"
            float estimatedConsumption : "Consommation estimée lorsqu’existante"
        }

        class FishingAreas {
            float wording : "Dénomination Zones de pêche "
            geometry geom : "Données géographique"
            float estimatedConsumption : "Consommation estimée lorsqu’existante"
        }

        class Industry {
            float wording : "Dénomination Industrie (ZES) "
            geometry geom : "Données géographique"
            float estimatedConsumption : "Consommation estimée lorsqu’existante"
        }

        class ICCN {
            float wording : "Dénomination ICCN "
            geometry geom : "Données géographique"
            float estimatedConsumption : "Consommation estimée lorsqu’existante"
        }

        class MiningAreas {
            float wording : "Dénomination Zones minières "
            geometry geom : "Données géographique"
            float estimatedConsumption : "Consommation estimée lorsqu’existante"
        }


    }


@enduml
